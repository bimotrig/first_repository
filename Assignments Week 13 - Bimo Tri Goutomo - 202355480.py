# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OqUPEL8rPcU8gbZ5-o5mrncqi5L1SvTH
"""

import numpy as np

def cost(w, x, y):
  pass

  def gradJ(w):
    pass

  def step_func(x):
    y = x>0
def step_func(y):
    return 2*y.astype(int)-1

print(step_func(np.array([-1.2,0.3])))

import numpy as np

def costf(w, x, y):
  pass

def gradJ(w):
    pass

def step_func(x):
    y = x>0
def step_func(y):
    return 2*y.astype(int)-1

xi = np.array([[1,1,1,1], [0,1,0,1],[0,0,1,1]])
print(xi)

import numpy as np

def costf(w, x, y):
  pass

def gradJ(w):
    pass

def step_func(x):
    y = x>0
def step_func(y):
    return 2*y.astype(int)-1

xi = np.array([[1,1,1,1], [0,1,0,1],[0,0,1,1]])
yi = np.array([[-1],[1],[1],[1]])
print(xi)
print(yi)

import numpy as np

def costf(w, x, y):
  pass

def gradJ(w):
    pass

def step_func(x):
    y = x>0
def step_func(y):
    return 2*y.astype(int)-1

xi = np.array([[1,1,1,1], [0,1,0,1],[0,0,1,1]])
yi = np.array([[-1],[1],[1],[1]])
wi = np.array([[0],[0],[0]])
print(xi)
print(yi)
print(wi)

import numpy as np

def costf(w, x, y):
  yp = w.T@x
  print(yp)
  print(y)

  return(yp-y.T)@(yp-y.T).T

def gradJ(w):
    pass

def step_func(x):
    y = x>0
def step_func(y):
    return 2*y.astype(int)-1

xi = np.array([[1,1,1,1], [0,1,0,1],[0,0,1,1]])
yi = np.array([[-1],[1],[1],[1]])
wi = np.array([[0],[0],[0]])

J = costf(wi, xi, yi)

#while(True):
#  JP = J
#  delw = alpha*gradJ(wi)
#  wi = wi + delw
#  J = costf(wi, xi, yi)
#  if(np.abs(J-JP)/J) < 0.000001: break

print(J)

import numpy as np

def costf(w, x, y):
  yp = w.T@x
  return(yp-y.T)@(yp-y.T).T

def gradJ(w):
  return np.array([8*w[0]+4*w[1]+4*w[2]-4, 4*w[0]+4*w[1]+2*w[2]-4, 4*w[0]+2*w[1]+4*2-4])

def step_func(x):
    y = x>0
def step_func(y):
    return 2*y.astype(int)-1

xi = np.array([[1,1,1,1], [0,1,0,1],[0,0,1,1]])
yi = np.array([[-1],[1],[1],[1]])
wi = np.array([[0],[0],[0]])

alpha = 0.01
J = costf(wi, xi, yi)

while(True):
  JP = J
  delw = alpha*gradJ(wi)
  wi = wi + delw
  J = costf(wi, xi, yi)
  print(J, wi)
  if(np.abs(J-JP)/J) < 0.000001: break

print(wi)

import numpy as np

def costf(w, x, y):
  yp = w.T@x
  return(yp-y.T)@(yp-y.T).T

def gradJ(w):
  return np.array([8*w[0]+4*w[1]+4*w[2]-4, 4*w[0]+4*w[1]+2*w[2]-4, 4*w[0]+2*w[1]+4*2-4])

def step_func(x):
    y = x>0
def step_func(y):
    return 2*y.astype(int)-1

xi = np.array([[1,1,1,1], [0,1,0,1],[0,0,1,1]])
yi = np.array([[-1],[1],[1],[1]])
wi = np.array([[0],[0],[0]])

alpha = 0.01
J = costf(wi, xi, yi)

while(True):
  JP = J
  delw = alpha*gradJ(wi)
  wi = wi - delw
  J = costf(wi, xi, yi)
  print(J, wi.T)
  if(np.abs(J-JP)/J) < 0.000001: break

print(wi)

import numpy as np

def costf(w, x, y):
  yp = w.T@x
  return(yp-y.T)@(yp-y.T).T

def gradJ(w):
  return np.array([8*w[0]+4*w[1]+4*w[2]-4, 4*w[0]+4*w[1]+2*w[2]-4, 4*w[0]+2*w[1]+4*2-4])

def step_func(x):
    y = x>0
def step_func(y):
    return 2*y.astype(int)-1

xi = np.array([[1,1,1,1], [0,1,0,1],[0,0,1,1]])
yi = np.array([[-1],[1],[1],[1]])
wi = np.array([[0],[0],[0]])

alpha = 0.01
J = costf(wi, xi, yi)

while(True):
  JP = J
  delw = alpha*gradJ(wi)
  wi = wi - delw
  J = costf(wi, xi, yi)
  print(J, wi.T, wi.T@xi)
  if(np.abs(J-JP)/J) < 0.000001: break

print(wi)

import numpy as np

def costf(w, x, y):
  yp = w.T@x
  return(yp-y.T)@(yp-y.T).T

def gradJ(w):
  return np.array([8*w[0]+4*w[1]+4*w[2]-4, 4*w[0]+4*w[1]+2*w[2]-4, 4*w[0]+2*w[1]+4*2-4])

def step_func(x):
    y = x>0
def step_func(y):
    return 2*y.astype(int)-1

xi = np.array([[1,1,1,1], [0,1,0,1],[0,0,1,1]])
yi = np.array([[-1],[1],[1],[1]])
wi = np.array([[0],[0],[0]])

alpha = 0.01
J = costf(wi, xi, yi)

while(True):
  JP = J
  delw = alpha*gradJ(wi)
  wi = wi - delw
  J = costf(wi, xi, yi)
  print(J, wi.T, step_func(wi.T@xi))
  if(np.abs(J-JP)/J) < 0.000001: break

print(wi)

import numpy as np

def costf(w, x, y):
  yp = w.T@x
  return(yp-y.T)@(yp-y.T).T

def gradJ(w):
  return np.array([8*w[0]+4*w[1]+4*w[2]-4, 4*w[0]+4*w[1]+2*w[2]-4, 4*w[0]+2*w[1]+4*2-4])

def step_func(x):
    y = x>0
def step_func(y):
    return 2*y.astype(int)-1

xi = np.array([[1,1,1,1], [0,1,0,1],[0,0,1,1]])
yi = np.array([[-1],[1],[1],[1]])
wi = np.array([[0],[0],[0]])

alpha = 0.01
J = costf(wi, xi, yi)

while(True):
  JP = J
  delw = alpha*gradJ(wi)
  wi = wi - delw
  J = costf(wi, xi, yi)
  print(J, wi.T, step_func(wi.T@xi))
  if(np.abs(J-JP)/J) < 0.000001: break

print(wi)